{"version":3,"sources":["webpack:///./src/components/BlogPostPreview.js","webpack:///./src/templates/tags.js"],"names":["BlogPostPreview","node","excerpt","frontmatter","key","className","to","path","title","date","tags","map","t","i","Header","tag","total","data-stellar-ratio","id","href","Tags","pageContext","data","location","totalCount","allMarkdownRemark","siteTitle","site","siteMetadata","posts","edges","keywords","post","idx","pageQuery"],"mappings":"2FAAA,0DAsCeA,IAlCS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjBC,EAAyBD,EAAzBC,QAASC,EAAgBF,EAAhBE,YACjB,MAAO,CACL,yBAAKC,IAAI,SAASC,UAAU,0BAC1B,yBAAKA,UAAU,aACb,yBAAKA,UAAU,2BACb,kBAAC,OAAD,CAAMC,GAAIH,EAAYI,MACpB,4BAAKJ,EAAYK,SAGrB,yBAAKH,UAAU,2BACb,yBAAKA,UAAU,+BACb,6CACA,kBAAC,IAAD,CAASI,KAAMN,EAAYM,KAAMJ,UAAW,aAE9C,0BAAMA,UAAU,+BAAhB,MACA,yBAAKA,UAAU,0BACb,wCACCF,EAAYO,KAAKC,KAAI,SAACC,EAAEC,GAAH,OAAS,kBAAC,OAAD,CAAMT,IAAKS,EAAGP,GAAE,QAAUM,GAAMA,UAKvE,6BACER,IAAI,UACJC,UAAU,2DAEV,yBAAKA,UAAU,aACb,2BAAIH,EAAJ,U,+KCzBFY,EAAS,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MACpB,OAAO,4BAAQX,UAAU,mBACvB,yBAAKA,UAAU,YAAYY,qBAAmB,QAC5C,yBAAKZ,UAAU,2BACb,4BAAKU,GACL,yBAAKV,UAAU,SAAf,iBACgB,uBAAGa,GAAG,UACHC,KAAI,iCAAmCJ,EAAnC,0CAAgFA,EAAhF,KAAwF,uBAC7GV,UAAU,sCAGd,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,+BACb,gCAASW,EAAT,kBA4BKI,UArBF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBR,EAAQM,EAARN,IACAS,EAAeF,EAAKG,kBAApBD,WACFE,EAAYJ,EAAKK,KAAKC,aAAapB,MACnCqB,EAAQP,EAAKG,kBAAkBK,MAErC,OACE,kBAAC,IAAD,CAAezB,UAAS,oBAAsBU,GAC5C,kBAAC,IAAD,CAAQQ,SAAUA,EAAUf,MAAOkB,GACjC,kBAAC,IAAD,CAAKlB,MAAOO,EAAKgB,SAAU,CAAC,OAAD,oBAC3B,yBAAK1B,UAAU,QACb,kBAACS,EAAD,CAAQE,MAAOQ,EAAYT,IAAKA,IAC/Bc,EAAMlB,KAAI,SAACqB,EAAMC,GAChB,OAAO,kBAAC,IAAD,eAAiB7B,IAAG,WAAa6B,GAAWD,WAUxD,IAAME,EAAS","file":"component---src-templates-tags-js-67e3e3adc25b0abf7a8a.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport TimeAgo from 'react-timeago/lib/index'\n\nconst BlogPostPreview = ({ node }) => {\n  const { excerpt, frontmatter } = node\n  return [\n    <div key=\"sample\" className=\"sample animated fadeIn\">\n      <div className=\"container\">\n        <div className=\"title animated fadeInUp\">\n          <Link to={frontmatter.path}>\n            <h1>{frontmatter.title}</h1>\n          </Link>\n        </div>\n        <div className=\"sidebar text-right meta\">\n          <div className=\"published animated fadeInUp\">\n            <strong>Published</strong>\n            <TimeAgo date={frontmatter.date} className={'timeago'} />\n          </div>\n          <span className=\"separator animated fadeInUp\">//</span>\n          <div className=\"tags animated fadeInUp\">\n            <strong>Tags</strong>\n            {frontmatter.tags.map((t,i) => <Link key={i} to={`/tag/${t}`}>{t}</Link>)}\n          </div>\n        </div>\n      </div>\n    </div>,\n    <article\n      key=\"article\"\n      className=\"excerpt animated fadeIn post tag-f tag-fable tag-vscode\"\n    >\n      <div className=\"container\">\n        <p>{excerpt}&hellip;</p>\n      </div>\n    </article>,\n  ]\n}\n\nexport default BlogPostPreview\n","import React from 'react'\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport BodyClassName from 'react-body-classname'\nimport BlogPostPreview from '../components/BlogPostPreview'\nimport { graphql } from 'gatsby'\n\nconst Header = ({tag, total}) => {\n  return <header className=\"animated fadeIn\">\n    <div className=\"container\" data-stellar-ratio=\"0.75\">\n      <div className=\"title animated fadeInUp\">\n        <h1>{tag}</h1>\n        <div className=\"share\">\n          Share this on <a id=\"twitter\"\n                           href={`http://twitter.com/share?text=${tag} on &amp;url=http://blog.nojaf.com/tag/${tag}/`}><i\n          className=\"fa nojaf-share-icon fa-twitter\" /></a>\n        </div>\n      </div>\n      <div className=\"sidebar text-right meta\">\n        <div className=\"published animated fadeInUp\">\n          <strong>{total} articles</strong>\n        </div>\n      </div>\n    </div>\n  </header>;\n}\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <BodyClassName className={`tag-template tag-${tag}`}>\n      <Layout location={location} title={siteTitle}>\n        <SEO title={tag} keywords={[`blog`, `blog.nojaf.com`]} />\n        <div className=\"main\">\n          <Header total={totalCount} tag={tag} />\n          {posts.map((post, idx) => {\n            return <BlogPostPreview key={`preview-${idx}`} {...post} />\n          })}\n        </div>\n      </Layout>\n    </BodyClassName>\n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            path\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}